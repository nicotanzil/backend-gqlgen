type Game {
    id: Int!
    name: String!
    description: String!
    releaseDate: Time!
    genres: [Genre!]!
    tags: [Tag!]!
    originalPrice: Float!
    promo: Promo
    gamePlayHour: Float!
    gameReviews: [Review!]!
    developers: [Developer!]!
    publisher: Publisher!
    system: System!
    users: [User!]!

    banner: String!
    video: [GameVideo!]!
    images: [GameImage!]!

    createdAt: Time!
    updatedAt: Time!
    deletedAt: Time!
}

input NewGame {
    name: String!
    description: String!
    genres: [InputGenre!]!
    tags: [InputTag!]!
    originalPrice: Float!
    developers: [InputDeveloper!]!
    publisherId: Int!
    systemId: Int!
}

extend type Query {
    games: [Game!]!
    gameById(id: Int!): Game!
    getGameByPromoId(id: Int!): Game!
    getGamePaginationAdmin(page: Int): [Game!]!
    getTotalGame: Int!
    gameSearch(keyword: String!): [Game!]!
    gameSearchPage(keyword: String!, page: Int!, price: Int!, tag: [InputTag!]!): [Game!]!
}

extend type Mutation {
    createGame(input: NewGame!): Game!
    updateGame(id: Int!, input: NewGame!): Game!
    deleteGame(id: Int!): Game!
    insertGameBanner(id: Int!, link: String!): Boolean!
    setGamePromo(gameId: Int!, promoId: Int!): Game!
}